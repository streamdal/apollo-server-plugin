"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.exampleStaggeredMultipleComponentsPerServiceAndPerGroup = exports.exampleSimple = exports.exampleMultipleComponentsPerService = exports.exampleMultipleGroup = exports.exampleConcurrent = exports.tailFast = exports.throughputFriendly = exports.highVolumeTail = exports.tailFriendly = exports.exampleStaggered = exports.randomPipeline = exports.runPipeline = exports.QUIET = void 0;
const sp_sdk_1 = require("@streamdal/protos/protos/sp_sdk");
const index_js_1 = require("../index.js");
const billing_js_1 = require("./billing.js");
exports.QUIET = true;
const exampleData = {
    boolean_t: true,
    boolean_f: false,
    object: {
        ipv4_address: "127.0.0.1",
        ipv6_address: "2001:0db8:85a3:0000:0000:8a2e:0370:7334",
        mac_address: "00-B0-D0-63-C2-26",
        uuid_dash: "550e8400-e29b-41d4-a716-446655440000",
        uuid_colon: "550e8400:e29b:41d4:a716:446655440000",
        uuid_stripped: "550e8400e29b41d4a716446655440000",
        number_as_string: "1234",
        field: "value",
        empty_string: "",
        null_field: null,
        empty_array: [],
    },
    array: ["value1", "value2"],
    number_int: 100,
    number_float: 100.1,
    timestamp_unix_str: "1614556800",
    timestamp_unix_num: 1614556800,
    timestamp_unix_nano_str: "1614556800000000000",
    timestamp_unix_nano_num: 1614556800000000000,
    timestamp_rfc3339: "2023-06-29T12:34:56Z",
};
const serviceAConfig = {
    streamdalUrl: "localhost:8082",
    streamdalToken: "1234",
    serviceName: "test-service",
    pipelineTimeout: "100",
    stepTimeout: "10",
    dryRun: false,
};
const serviceBConfig = {
    streamdalUrl: "localhost:8082",
    streamdalToken: "1234",
    serviceName: "another-test-service",
    pipelineTimeout: "100",
    stepTimeout: "10",
    dryRun: false,
};
const serviceCConfig = {
    streamdalUrl: "localhost:8082",
    streamdalToken: "1234",
    serviceName: "third-service",
    pipelineTimeout: "100",
    stepTimeout: "10",
    dryRun: false,
};
const audienceAConsumer = {
    serviceName: "test-service",
    componentName: "kafka",
    operationType: index_js_1.OperationType.CONSUMER,
    operationName: "kafka-consumer",
};
const audienceAProducer = {
    serviceName: "test-service",
    componentName: "kafka",
    operationType: index_js_1.OperationType.PRODUCER,
    operationName: "kafka-producer",
};
const audienceBConsumer = {
    serviceName: "another-test-service",
    componentName: "another-kafka",
    operationType: index_js_1.OperationType.CONSUMER,
    operationName: "test-kafka-consumer",
};
const audienceBProducer = {
    serviceName: "another-test-service",
    componentName: "another-kafka",
    operationType: index_js_1.OperationType.PRODUCER,
    operationName: "test-kafka-producer",
};
const audienceCConsumer = {
    serviceName: "third-service",
    componentName: "third-kafka",
    operationType: index_js_1.OperationType.CONSUMER,
    operationName: "kafka-consumer",
};
const audienceCProducer = {
    serviceName: "third-service",
    componentName: "third-kafka",
    operationType: index_js_1.OperationType.PRODUCER,
    operationName: "kafka-consumer",
};
const logPipeline = async (streamdal, audience, input) => {
    if (exports.QUIET) {
        console.debug = () => null;
        // console.dir = () => null;
    }
    console.debug("--------------------------------");
    console.debug("pipeline request start", new Date());
    console.debug(`sending pipeline request for ${audience.serviceName} - ${index_js_1.OperationType[audience.operationType].toLowerCase()}`);
    const { status, statusMessage, metadata } = await streamdal.process({
        audience: audience,
        data: new TextEncoder().encode(JSON.stringify(input)),
    });
    console.debug("metadata:", metadata);
    //
    // no active pipeline messages are technically errors
    // but more informational
    console.debug("result status", sp_sdk_1.ExecStatus[status]);
    statusMessage && console.debug("status message", statusMessage);
    console.debug("result data:");
    try {
        // data && data.length > 0
        //   ? console.dir(JSON.parse(new TextDecoder().decode(data)), { depth: 20 })
        //   : console.debug("no data returned");
    }
    catch (e) {
        console.error("could not parse data", e);
    }
    console.debug("pipeline status:");
    // console.dir(pipelineStatus, { depth: 20 });
    console.debug("pipeline request done", new Date());
    console.debug("--------------------------------");
    console.debug("\n");
};
const runPipeline = (streamdal, audience, input, interval = 0) => interval
    ? setInterval(() => {
        void logPipeline(streamdal, audience, input);
    }, interval)
    : void logPipeline(streamdal, audience, input);
exports.runPipeline = runPipeline;
const randomPipeline = (streamdal, audience, input) => {
    (0, exports.runPipeline)(streamdal, audience, input);
    setTimeout(() => (0, exports.randomPipeline)(streamdal, audience, input), Math.floor(Math.random() * (3000 - 250) + 3000));
};
exports.randomPipeline = randomPipeline;
const exampleStaggered = async () => {
    const streamdalA = await (0, index_js_1.registerStreamdal)(serviceAConfig);
    const streamdalB = await (0, index_js_1.registerStreamdal)(serviceBConfig);
    (0, exports.randomPipeline)(streamdalA, audienceAConsumer, exampleData);
    (0, exports.runPipeline)(streamdalA, audienceAProducer, exampleData, 4000);
    (0, exports.runPipeline)(streamdalB, audienceBConsumer, exampleData, 8000);
    (0, exports.runPipeline)(streamdalB, audienceBProducer, exampleData, 12000);
};
exports.exampleStaggered = exampleStaggered;
const tailFriendly = async () => {
    const streamdalA = await (0, index_js_1.registerStreamdal)(serviceAConfig);
    const streamdalB = await (0, index_js_1.registerStreamdal)(serviceBConfig);
    (0, exports.runPipeline)(streamdalA, audienceAConsumer, exampleData);
    (0, exports.runPipeline)(streamdalA, { ...audienceAConsumer, operationName: "kafka-consumer-two" }, exampleData);
    (0, exports.runPipeline)(streamdalA, { ...audienceAConsumer, operationName: "kafka-consumer-three" }, exampleData);
    (0, exports.runPipeline)(streamdalA, { ...audienceAConsumer, componentName: "another-kafka" }, exampleData);
    (0, exports.runPipeline)(streamdalA, audienceAProducer, exampleData);
    (0, exports.runPipeline)(streamdalB, audienceBConsumer, exampleData, 1);
    (0, exports.runPipeline)(streamdalB, audienceBProducer, exampleData);
    (0, exports.runPipeline)(streamdalB, { ...audienceBProducer, componentName: "kafka" }, exampleData);
};
exports.tailFriendly = tailFriendly;
const highVolumeTail = async () => {
    const streamdalA = await (0, index_js_1.registerStreamdal)(serviceAConfig);
    const streamdalB = await (0, index_js_1.registerStreamdal)(serviceBConfig);
    (0, exports.runPipeline)(streamdalA, audienceAConsumer, exampleData, 500);
    (0, exports.runPipeline)(streamdalA, { ...audienceAConsumer, operationName: "kafka-consumer-two" }, exampleData, 500);
    (0, exports.runPipeline)(streamdalA, { ...audienceAConsumer, operationName: "kafka-consumer-three" }, exampleData, 1000);
    (0, exports.runPipeline)(streamdalA, { ...audienceAConsumer, componentName: "another-kafka" }, exampleData, 500);
    (0, exports.runPipeline)(streamdalA, { ...audienceAConsumer, componentName: "another-kafka" }, exampleData);
    (0, exports.runPipeline)(streamdalA, audienceAProducer, exampleData, 2000);
    (0, exports.runPipeline)(streamdalB, audienceBConsumer, exampleData, 250);
    (0, exports.runPipeline)(streamdalB, audienceBProducer, exampleData, 500);
    (0, exports.runPipeline)(streamdalB, { ...audienceBProducer, componentName: "kafka" }, exampleData, 500);
};
exports.highVolumeTail = highVolumeTail;
const throughputFriendly = async () => {
    const streamdalA = await (0, index_js_1.registerStreamdal)(serviceAConfig);
    const streamdalB = await (0, index_js_1.registerStreamdal)(serviceBConfig);
    (0, exports.randomPipeline)(streamdalA, audienceAConsumer, exampleData);
    (0, exports.randomPipeline)(streamdalA, { ...audienceAConsumer, operationName: "kafka-consumer-two" }, exampleData);
    (0, exports.randomPipeline)(streamdalA, { ...audienceAConsumer, operationName: "kafka-consumer-three" }, exampleData);
    (0, exports.randomPipeline)(streamdalA, { ...audienceAConsumer, componentName: "another-kafka" }, exampleData);
    (0, exports.randomPipeline)(streamdalA, audienceAProducer, exampleData);
    (0, exports.randomPipeline)(streamdalB, audienceBConsumer, exampleData);
    (0, exports.randomPipeline)(streamdalB, audienceBProducer, exampleData);
    (0, exports.randomPipeline)(streamdalB, { ...audienceBProducer, componentName: "kafka" }, exampleData);
};
exports.throughputFriendly = throughputFriendly;
const tailFast = async () => {
    const streamdalB = await (0, index_js_1.registerStreamdal)(serviceBConfig);
    (0, exports.runPipeline)(streamdalB, audienceBConsumer, exampleData, 100);
};
exports.tailFast = tailFast;
const exampleConcurrent = async () => {
    const streamdalA = await (0, index_js_1.registerStreamdal)(serviceAConfig);
    const streamdalB = await (0, index_js_1.registerStreamdal)(serviceBConfig);
    (0, exports.runPipeline)(streamdalA, audienceAConsumer, exampleData, 4000);
    (0, exports.runPipeline)(streamdalA, audienceAProducer, exampleData);
    (0, exports.runPipeline)(streamdalB, audienceBConsumer, exampleData);
    (0, exports.runPipeline)(streamdalB, audienceBProducer, exampleData);
};
exports.exampleConcurrent = exampleConcurrent;
const exampleMultipleGroup = async () => {
    const streamdalA = await (0, index_js_1.registerStreamdal)(serviceAConfig);
    const streamdalB = await (0, index_js_1.registerStreamdal)(serviceBConfig);
    (0, exports.runPipeline)(streamdalA, audienceAConsumer, exampleData);
    (0, exports.runPipeline)(streamdalA, { ...audienceAConsumer, operationName: "kafka-consumer-two" }, exampleData);
    (0, exports.runPipeline)(streamdalA, audienceAProducer, exampleData);
    (0, exports.runPipeline)(streamdalB, audienceBConsumer, exampleData);
    (0, exports.runPipeline)(streamdalB, audienceBProducer, exampleData);
    (0, exports.runPipeline)(streamdalB, { ...audienceBProducer, operationName: "kafka-producer-two" }, exampleData);
};
exports.exampleMultipleGroup = exampleMultipleGroup;
const exampleMultipleComponentsPerService = async () => {
    const streamdalA = await (0, index_js_1.registerStreamdal)(serviceAConfig);
    const streamdalB = await (0, index_js_1.registerStreamdal)(serviceBConfig);
    (0, exports.runPipeline)(streamdalA, audienceAConsumer, exampleData);
    (0, exports.runPipeline)(streamdalA, { ...audienceAConsumer, componentName: "another-kafka" }, exampleData);
    (0, exports.runPipeline)(streamdalA, audienceAProducer, exampleData);
    (0, exports.runPipeline)(streamdalB, audienceBConsumer, exampleData);
    (0, exports.runPipeline)(streamdalB, audienceBProducer, exampleData);
    (0, exports.runPipeline)(streamdalB, { ...audienceBProducer, componentName: "kafka" }, exampleData);
};
exports.exampleMultipleComponentsPerService = exampleMultipleComponentsPerService;
const exampleSimple = async () => {
    const streamdalA = await (0, index_js_1.registerStreamdal)(serviceAConfig);
    (0, exports.runPipeline)(streamdalA, audienceAConsumer, exampleData);
};
exports.exampleSimple = exampleSimple;
const exampleStaggeredMultipleComponentsPerServiceAndPerGroup = async () => {
    const streamdalA = await (0, index_js_1.registerStreamdal)(serviceAConfig);
    const streamdalB = await (0, index_js_1.registerStreamdal)(serviceBConfig);
    const streamdalC = await (0, index_js_1.registerStreamdal)(serviceCConfig);
    (0, exports.runPipeline)(streamdalA, audienceAConsumer, exampleData, 2000);
    (0, exports.runPipeline)(streamdalA, { ...audienceAConsumer, operationName: "kafka-consumer-two" }, exampleData, 4000);
    (0, exports.runPipeline)(streamdalA, { ...audienceAConsumer, operationName: "kafka-consumer-three" }, exampleData, 6000);
    (0, exports.runPipeline)(streamdalA, { ...audienceAConsumer, componentName: "another-kafka" }, exampleData, 8000);
    (0, exports.runPipeline)(streamdalA, audienceAProducer, exampleData, 10000);
    (0, exports.runPipeline)(streamdalB, audienceBConsumer, exampleData, 12000);
    (0, exports.runPipeline)(streamdalB, audienceBProducer, exampleData, 14000);
    (0, exports.runPipeline)(streamdalB, { ...audienceBProducer, componentName: "kafka" }, exampleData, 16000);
    (0, exports.runPipeline)(streamdalC, audienceCConsumer, exampleData, 2000);
    (0, exports.runPipeline)(streamdalC, audienceCProducer, exampleData, 2000);
};
exports.exampleStaggeredMultipleComponentsPerServiceAndPerGroup = exampleStaggeredMultipleComponentsPerServiceAndPerGroup;
//
// void kvExample();
// void singleWelcomeExample();
// void singleSignupExample();
(0, billing_js_1.onboardingExample)();
//# sourceMappingURL=index.js.map