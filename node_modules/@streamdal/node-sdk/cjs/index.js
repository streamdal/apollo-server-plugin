"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Streamdal = exports.registerStreamdal = exports.SDKResponse = exports.OperationType = exports.ExecStatus = exports.Audience = void 0;
const sp_common_1 = require("@streamdal/protos/protos/sp_common");
Object.defineProperty(exports, "Audience", { enumerable: true, get: function () { return sp_common_1.Audience; } });
Object.defineProperty(exports, "OperationType", { enumerable: true, get: function () { return sp_common_1.OperationType; } });
const sp_sdk_1 = require("@streamdal/protos/protos/sp_sdk");
Object.defineProperty(exports, "ExecStatus", { enumerable: true, get: function () { return sp_sdk_1.ExecStatus; } });
Object.defineProperty(exports, "SDKResponse", { enumerable: true, get: function () { return sp_sdk_1.SDKResponse; } });
const uuid_1 = require("uuid");
const audience_js_1 = require("./internal/audience.js");
const grpc_js_1 = require("./internal/grpc.js");
const heartbeat_js_1 = require("./internal/heartbeat.js");
const metrics_js_1 = require("./internal/metrics.js");
const process_js_1 = require("./internal/process.js");
const register_js_1 = require("./internal/register.js");
const initConfigs = (configs) => {
    if (process.env.NODE_ENV === "production" ||
        configs?.quiet ||
        process.env.STREAMDAL_QUIET) {
        console.debug = () => null;
    }
    const url = configs?.streamdalUrl ?? process.env.STREAMDAL_URL;
    const token = configs?.streamdalToken ?? process.env.STREAMDAL_TOKEN;
    const name = configs?.serviceName ?? process.env.STREAMDAL_SERVICE_NAME;
    if (!url || !token || !name) {
        throw new Error(`Required configs are missing. You must provide configs streamdalUrl, streamdalToken and serviceName 
        either as constructor arguments to Streamdal() or as environment variables in the form of STREAMDAL_URL, STREAMDAL_TOKEN and STREAMDAL_SERVICE_NAME`);
    }
    const sessionId = (0, uuid_1.v4)();
    const grpcClient = (0, grpc_js_1.client)(url);
    const internalConfigs = {
        grpcClient,
        sessionId,
        streamdalUrl: url,
        streamdalToken: token,
        serviceName: name,
        pipelineTimeout: configs?.pipelineTimeout ??
            process.env.STREAMDAL_PIPELINE_TIMEOUT ??
            "100",
        stepTimeout: configs?.stepTimeout ?? process.env.STREAMDAL_STEP_TIMEOUT ?? "10",
        dryRun: configs?.dryRun ?? !!process.env.STREAMDAL_DRY_RUN,
        audiences: configs?.audiences,
    };
    // Heartbeat is obsolete
    setInterval(() => {
        void (0, heartbeat_js_1.heartbeat)(internalConfigs);
    }, heartbeat_js_1.HEARTBEAT_INTERVAL);
    setInterval(() => {
        (0, metrics_js_1.sendMetrics)(internalConfigs);
    }, metrics_js_1.METRIC_INTERVAL);
    return internalConfigs;
};
/**
 * This is the recommended way to register with the Streamdal server
 * as you can await completion before processing pipelines.
 */
const registerStreamdal = async (configs) => {
    const internalConfigs = initConfigs(configs);
    await (0, audience_js_1.addAudiences)(internalConfigs);
    await (0, register_js_1.register)(internalConfigs);
    return {
        process: async ({ audience, data, }) => {
            return (0, process_js_1.retryProcessPipelines)({
                configs: internalConfigs,
                audience,
                data,
            });
        },
    };
};
exports.registerStreamdal = registerStreamdal;
/**
 * Prefer registerStreamdal for guaranteed registration before processing pipelines.
 *
 * This class can be used in envs that don't support top level await.
 * Subsequent process pipeline requests will retry until registration is done.
 */
class Streamdal {
    internalConfigs;
    constructor(configs) {
        this.internalConfigs = initConfigs(configs);
        void (0, audience_js_1.addAudiences)(this.internalConfigs);
        void (0, register_js_1.register)(this.internalConfigs);
    }
    async process({ audience, data }) {
        return (0, process_js_1.retryProcessPipelines)({
            configs: this.internalConfigs,
            audience,
            data,
        });
    }
}
exports.Streamdal = Streamdal;
//# sourceMappingURL=index.js.map