/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { Command } from "@streamdal/protos/protos/sp_command";
import { Audience } from "@streamdal/protos/protos/sp_common";
import { ClientType } from "@streamdal/protos/protos/sp_info";
import { RegisterRequest } from "@streamdal/protos/protos/sp_internal";
import { IInternalClient } from "@streamdal/protos/protos/sp_internal.client";
import { Pipeline } from "@streamdal/protos/protos/sp_pipeline";
import { InternalConfigs } from "../index.js";
import { TokenBucket } from "./utils/tokenBucket.js";
export interface RegisterConfigs {
    grpcClient: IInternalClient;
    sessionId: string;
    streamdalToken: string;
    serviceName: string;
    dryRun: boolean;
}
export interface Tail {
    tailStatus?: boolean;
    tailRequestId?: string;
    sampleBucket: TokenBucket;
}
export declare const internal: {
    registered: boolean;
    pipelineInitialized: boolean;
    pipelines: Map<string, Map<string, Pipeline>>;
    kv: Map<string, Uint8Array>;
    audiences: Map<string, {
        audience: Audience;
        tails: Map<string, Tail>;
    }>;
    wasmModules: Map<string, any>;
    schemas: Map<string, any>;
};
export declare const audienceKey: (audience: Audience) => string;
export declare const version: () => string;
export declare const clientInfo: {
    clientType: ClientType;
    libraryName: string;
    libraryVersion: string;
    language: string;
    arch: NodeJS.Architecture;
    os: NodeJS.Platform;
};
export declare const processRegisterResponses: (call: ServerStreamingCall<RegisterRequest, Command>, configs: InternalConfigs) => Promise<void>;
export declare const retryRegister: (configs: InternalConfigs) => NodeJS.Timeout;
export declare const register: (configs: InternalConfigs) => Promise<void>;
