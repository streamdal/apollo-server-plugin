"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendTail = exports.openTailStream = void 0;
const sp_common_1 = require("@streamdal/protos/protos/sp_common");
const register_js_1 = require("./register.js");
let tailStream = null;
const openTailStream = (configs) => {
    try {
        return configs.grpcClient.sendTail({
            meta: { "auth-token": configs.streamdalToken },
        });
    }
    catch (e) {
        console.error("error opening tail client stream");
        return null;
    }
};
exports.openTailStream = openTailStream;
const sendTail = ({ configs, audience, originalData, newData, }) => {
    const key = (0, register_js_1.audienceKey)(audience);
    const tails = register_js_1.internal.audiences.get(key)?.tails;
    // eslint-disable-next-line @typescript-eslint/no-misused-promises
    tails?.forEach(async ({ tailStatus, tailRequestId, sampleBucket }) => {
        if (!tailStatus) {
            return;
        }
        try {
            if (!sampleBucket.consume()) {
                console.debug("sample rate exceeded, discarding tail");
                return;
            }
            if (tailStream == null) {
                console.debug("tail stream is closed, reopening...");
                tailStream = (0, exports.openTailStream)(configs);
            }
            const tailResponse = sp_common_1.TailResponse.create({
                timestampNs: (BigInt(new Date().getTime()) * BigInt(1e6)).toString(),
                type: sp_common_1.TailResponseType.PAYLOAD,
                tailRequestId: tailRequestId,
                audience,
                sessionId: configs.sessionId,
                originalData,
                newData,
            });
            console.debug("sending tail response", tailResponse);
            await tailStream?.requests.send(tailResponse);
            const headers = await tailStream?.headers;
            console.debug("got tail response headers: ", headers);
            const response = await tailStream?.response;
            console.debug("got tail response message: ", response);
            const status = await tailStream?.status;
            console.debug("got tail status: ", status);
            const trailers = await tailStream?.trailers;
            console.debug("got tail trailers: ", trailers);
        }
        catch (e) {
            tailStream = null;
            console.error("Error sending tail", e);
        }
    });
};
exports.sendTail = sendTail;
//# sourceMappingURL=tail.js.map