"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.kvExists = exports.kvCommand = exports.kvInstruction = void 0;
const sp_shared_1 = require("@streamdal/protos/protos/shared/sp_shared");
const sp_steps_kv_1 = require("@streamdal/protos/protos/steps/sp_steps_kv");
const register_js_1 = require("./register.js");
const wasm_js_1 = require("./wasm.js");
const kvInstruction = (instruction) => {
    switch (instruction.action) {
        case sp_shared_1.KVAction.KV_ACTION_DELETE_ALL: {
            register_js_1.internal.kv.clear();
            break;
        }
        case sp_shared_1.KVAction.KV_ACTION_DELETE: {
            instruction.object?.key && register_js_1.internal.kv.delete(instruction.object.key);
            break;
        }
        case sp_shared_1.KVAction.KV_ACTION_EXISTS: {
            return instruction.object?.key && register_js_1.internal.kv.has(instruction.object.key);
        }
        case sp_shared_1.KVAction.KV_ACTION_GET: {
            return instruction.object?.key && register_js_1.internal.kv.get(instruction.object.key);
        }
        case sp_shared_1.KVAction.KV_ACTION_UPDATE:
        case sp_shared_1.KVAction.KV_ACTION_CREATE: {
            instruction.object?.key &&
                register_js_1.internal.kv.set(instruction.object.key, instruction.object.value);
            break;
        }
    }
};
exports.kvInstruction = kvInstruction;
const kvCommand = (command) => {
    for (const instruction of command.instructions) {
        (0, exports.kvInstruction)(instruction);
    }
};
exports.kvCommand = kvCommand;
const kvExists = (exports, keyPointer, keyLength) => {
    const kvStep = sp_steps_kv_1.KVStep.fromBinary(new Uint8Array(exports.memory.buffer, keyPointer, keyLength));
    const resultBytes = sp_steps_kv_1.KVStepResponse.toBinary(sp_steps_kv_1.KVStepResponse.create({
        status: register_js_1.internal.kv.has(kvStep.key)
            ? sp_steps_kv_1.KVStatus.KV_STATUS_SUCCESS
            : sp_steps_kv_1.KVStatus.KV_STATUS_FAILURE,
    }));
    const resultPointer = exports.alloc(resultBytes.length);
    const mem = new Uint8Array(exports.memory.buffer, resultPointer, resultBytes.length);
    mem.set(resultBytes);
    const response = (0, wasm_js_1.writeResponse)(resultPointer, resultBytes.length);
    return response;
};
exports.kvExists = kvExists;
//# sourceMappingURL=kv.js.map