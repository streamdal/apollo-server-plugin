import { NotifyRequest_ConditionType } from "@streamdal/protos/protos/sp_internal";
import { ExecStatus } from "@streamdal/protos/protos/sp_sdk";
export const statusToNotifyType = (status) => {
    switch (status) {
        case ExecStatus.TRUE: {
            return NotifyRequest_ConditionType.ON_TRUE;
        }
        case ExecStatus.FALSE: {
            return NotifyRequest_ConditionType.ON_FALSE;
        }
        case ExecStatus.ERROR: {
            return NotifyRequest_ConditionType.ON_ERROR;
        }
        default:
            return NotifyRequest_ConditionType.UNSET;
    }
};
export const notifyStep = async ({ configs, step, stepStatus, audience, pipelineId, payload, }) => {
    console.debug("notifying error step", step.name);
    try {
        await configs.grpcClient.notify({
            conditionType: statusToNotifyType(stepStatus.status),
            step,
            audience,
            pipelineId,
            payload,
            occurredAtUnixTsUtc: Date.now().toString(),
        }, { meta: { "auth-token": configs.streamdalToken } });
    }
    catch (e) {
        console.error("error sending notification to server", e);
    }
};
//# sourceMappingURL=notify.js.map