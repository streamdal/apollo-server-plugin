import { ResponseCode } from "@streamdal/protos/protos/sp_common";
import { audienceKey, internal } from "./register.js";
export const addAudiences = async (configs) => {
    if (!configs.audiences || configs.audiences.length === 0) {
        return;
    }
    for (const audience of configs.audiences) {
        await addAudience({ configs, audience });
    }
};
export const addAudience = async ({ configs, audience }) => {
    try {
        if (internal.audiences.has(audienceKey(audience))) {
            return;
        }
        const { response } = await configs.grpcClient.newAudience({
            sessionId: configs.sessionId,
            audience,
        }, { meta: { "auth-token": configs.streamdalToken } });
        if (response.code === ResponseCode.OK) {
            internal.audiences.set(audienceKey(audience), {
                audience,
                tails: new Map(),
            });
        }
        else {
            console.error("error adding audience", response.message);
        }
    }
    catch (error) {
        console.error("error adding audience", error);
    }
};
//# sourceMappingURL=audience.js.map