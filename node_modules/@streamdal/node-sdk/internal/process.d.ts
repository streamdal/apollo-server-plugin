import { Audience } from "@streamdal/protos/protos/sp_common";
import { IInternalClient } from "@streamdal/protos/protos/sp_internal.client";
import { Pipeline, PipelineStep } from "@streamdal/protos/protos/sp_pipeline";
import { ExecStatus, PipelineStatus, SDKResponse, StepStatus } from "@streamdal/protos/protos/sp_sdk";
import { InterStepResult, WASMExitCode } from "@streamdal/protos/protos/sp_wsm";
import { InternalConfigs, StreamdalRequest } from "../index.js";
import { Tail } from "./register.js";
export interface PipelineConfigs {
    grpcClient: IInternalClient;
    streamdalToken: string;
    sessionId: string;
    dryRun: boolean;
}
export type EnhancedStepStatus = StepStatus & {
    metadata: Record<string, string>;
};
export type EnchancedPipelineStatus = PipelineStatus & {
    metadata: Record<string, string>;
};
export interface TailRequest {
    configs: PipelineConfigs;
    tails?: Map<string, Tail>;
    audience: Audience;
    originalData: Uint8Array;
    newData?: Uint8Array;
}
export declare const MAX_PAYLOAD_SIZE: number;
export declare const retryProcessPipelines: ({ configs, audience, data, }: {
    configs: InternalConfigs;
} & StreamdalRequest) => Promise<SDKResponse>;
export declare const processPipeline: ({ originalData, audience, configs, pipeline, }: {
    originalData: Uint8Array;
    audience: Audience;
    configs: InternalConfigs;
    pipeline: Pipeline;
}) => Promise<{
    pipelineStatus: EnchancedPipelineStatus;
    data: Uint8Array;
}>;
export declare const processPipelines: ({ configs, audience, data, }: {
    configs: InternalConfigs;
} & StreamdalRequest) => Promise<SDKResponse>;
export declare const getStepStatus: (exitCode: WASMExitCode) => ExecStatus;
export declare const resultCondition: ({ configs, audience, step, pipeline, stepStatus, payload, }: {
    configs: PipelineConfigs;
    audience: Audience;
    step: PipelineStep;
    pipeline: Pipeline;
    stepStatus: EnhancedStepStatus;
    payload: Uint8Array;
}) => void;
export declare const runStep: ({ originalData, audience, configs, step, pipeline, lastStepResult, }: {
    originalData: Uint8Array;
    audience: Audience;
    configs: PipelineConfigs;
    step: PipelineStep;
    pipeline: Pipeline;
    lastStepResult?: InterStepResult | undefined;
}) => Promise<{
    stepStatus: EnhancedStepStatus;
    data: Uint8Array;
    interStepResult?: InterStepResult | undefined;
}>;
