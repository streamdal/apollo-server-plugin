import { Audience, OperationType } from "@streamdal/protos/protos/sp_common";
import { IInternalClient } from "@streamdal/protos/protos/sp_internal.client";
import { ExecStatus, SDKResponse } from "@streamdal/protos/protos/sp_sdk";
export { Audience, ExecStatus, OperationType, SDKResponse };
export interface StreamdalConfigs {
    streamdalUrl?: string;
    streamdalToken?: string;
    serviceName?: string;
    pipelineTimeout?: string;
    stepTimeout?: string;
    dryRun?: boolean;
    audiences?: Audience[];
    quiet?: boolean;
}
export interface InternalConfigs {
    grpcClient: IInternalClient;
    streamdalUrl: string;
    streamdalToken: string;
    serviceName: string;
    pipelineTimeout: string;
    stepTimeout: string;
    dryRun: boolean;
    sessionId: string;
    audiences?: Audience[];
}
export interface StreamdalRequest {
    audience: Audience;
    data: Uint8Array;
}
export interface StreamdalRegistration {
    process: (arg: StreamdalRequest) => Promise<SDKResponse>;
}
/**
 * This is the recommended way to register with the Streamdal server
 * as you can await completion before processing pipelines.
 */
export declare const registerStreamdal: (configs?: StreamdalConfigs) => Promise<StreamdalRegistration>;
/**
 * Prefer registerStreamdal for guaranteed registration before processing pipelines.
 *
 * This class can be used in envs that don't support top level await.
 * Subsequent process pipeline requests will retry until registration is done.
 */
export declare class Streamdal {
    private internalConfigs;
    constructor(configs?: StreamdalConfigs);
    process({ audience, data }: StreamdalRequest): Promise<SDKResponse>;
}
